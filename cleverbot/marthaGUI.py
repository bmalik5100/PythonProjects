"""

Icon credit goes to bqlqn and Freepik from flaticon.com
AI Generated images from Generated.photos 

"""

from ast import Bytes
import os
import sys
import time
import base64
import json
import pocketsphinx
import PySimpleGUI as sg
import pyttsx3
import random
import requests
import speech_recognition as sr
import threading
import urllib.request, urllib.error, urllib.parse

from tkinter import font
from datetime import datetime
from cleverwrap import CleverWrap
from html.parser import HTMLParser
from io import BufferedRandom, BytesIO, StringIO
from PIL import Image, ImageFilter
from PySimpleGUI.PySimpleGUI import Window
from sys import platform
from urllib3 import request

# API Keys
CLEVERBOT_API_KEY = "[REDACTED]"
AI_PHOTOS_API_KEY = "[REDACTED]"

PAUSED = True

voice = None
brain = None
attention = None
face = {}
recording = sr.Recognizer()
lock = threading.Lock()

pause64 = b'iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAC8HpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZZbjiQpDEX/WcUsAdsYm+XwlGYHs/y5xGsqq6ukbnX/jJSBAkiHsY2Pg8gw//l7hb9wUbEUkprnknPElUoqXDHxeF716Cmmoz8uvp/Rqzw8DxgiwSjnT8+X/i2nx8A5VMz0gyHv14P2+qCkJ4JXQ5cj2RExJuMyVC5DwucDugzUc1sxF7ePW2jzHK/1Zxpwh921W6qX8qffyZC9ofAjzFNIInoWPgOQfVOQiomhZ1EokmTM0yW5t4SEfJWn+CGq8JnKM6Nv5J+gSD7lAYLXZOZn/FJO+nXyw5HiD56lP55f5CaPi5ck73ut4WGtee6upoyU5mtT91aOGRQbUi7HsoxmuBVzO1pB84Dq7UA+Yo8NrVMhBpZFiQZVWjSPsVNHiIknG0bmDlBb5mJcuEsM4JR2o8UmRYY4aHXgFUj5iYUOv+Vw18nheBA0mWCMdimE3f2J9q2htXbJE0V/coW4eBchwtjkdg8tAKF115EeCb7b52tzFRDUI82ODdbYThNN6aqtXUdygBYoKsbzXSMblwGkCL4VwZCAQMwkSpmiMRsR8ujgU2HIWRI3ICBVHoiSk0gGHOftG2uMDl1WPsU4swBC8TIZ0BSpYLUPNtSPJUcNVRVNqprV1LVozZJT1pyz5X34VRNLppbNzK1YdfHk6tnNPXjxWrgIDkctuVjxUkqtcFphuWJ1hUKtjZu01LTlZs1babWjfHrq2nO37qGXXgcPGTgnRh42fJRRJ02U0kxTZ542fZZZF0ptyUpLV162fJVVH2oUTqw/tJ+nRjc1PkhtRXuoYanZbYL2caKbGYhxIhC3TQAFzZtZdEqJw0a3mcWCcwxnG6LUDWfQJgaCaRLroofdf+ReuIWUfosb3+TCRvcnyIWN7htyP3L7gtrYX5seJRyE9mu4kxoFrx8Uplf2uj9qPz2GX13wNvQ29Db0NvQ29Db0NvT/MbTw56HgT/q/6XSjjv5J3m0AAAGFaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1OlIhUHK6g4ZKhOFvxCHLUKRagQaoVWHUwubS00aUhSXBwF14KDH4tVBxdnXR1cBUHwA8TNzUnRRUr8X1JoEePBcT/e3XvcvQOEWolpVtsooOm2mUrExUx2RQy9IoR+9CKGMZlZxqwkJeE7vu4R4OtdjGf5n/tzdKk5iwEBkXiGGaZNvE48tWkbnPeJI2xDVonPiUdMuiDxI9cVj984F1wWeGbETKfmiCPEYqGFlRZmG6ZGPEkcVTWd8oWMxyrnLc5aqcIa9+QvDOf05SWu0xxEAgtYhAQRCiooogSb+ipCJ8VCivbjPv4B1y+RSyFXEYwc8yhDg+z6wf/gd7dWfmLcSwrHgfYXx/kYAkK7QL3qON/HjlM/AYLPwJXe9JdrwPQn6dWmFj0CureBi+umpuwBlztA35Mhm7IrBWkK+TzwfkbflAV6boHOVa+3xj5OH4A0dZW8AQ4OgeECZa/5vLujtbd/zzT6+wHb6XLRoxteVQAAD4tpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDQuNC4wLUV4aXYyIj4KIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgIHhtbG5zOmlwdGNFeHQ9Imh0dHA6Ly9pcHRjLm9yZy9zdGQvSXB0YzR4bXBFeHQvMjAwOC0wMi0yOS8iCiAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICB4bWxuczpwbHVzPSJodHRwOi8vbnMudXNlcGx1cy5vcmcvbGRmL3htcC8xLjAvIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDphOGYyOTY1NC0yYzg1LTQ3OTMtODc4ZC04NmMwNTgzYzQ5MjgiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6M2FmYmJhMWItNTdlNi00YzdhLTgyN2YtN2FjM2EzNDI5ZGUwIgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NDFmNGEzNmMtYmJhNi00MDgzLWEyNDQtY2Y4MTQxYzBiYzFiIgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJMaW51eCIKICAgR0lNUDpUaW1lU3RhbXA9IjE2MjcyNDk2NDUyMTg2MDQiCiAgIEdJTVA6VmVyc2lvbj0iMi4xMC4yMiIKICAgZGM6Rm9ybWF0PSJpbWFnZS9wbmciCiAgIHRpZmY6T3JpZW50YXRpb249IjEiCiAgIHhtcDpDcmVhdG9yVG9vbD0iR0lNUCAyLjEwIj4KICAgPGlwdGNFeHQ6TG9jYXRpb25DcmVhdGVkPgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6TG9jYXRpb25DcmVhdGVkPgogICA8aXB0Y0V4dDpMb2NhdGlvblNob3duPgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6TG9jYXRpb25TaG93bj4KICAgPGlwdGNFeHQ6QXJ0d29ya09yT2JqZWN0PgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6QXJ0d29ya09yT2JqZWN0PgogICA8aXB0Y0V4dDpSZWdpc3RyeUlkPgogICAgPHJkZjpCYWcvPgogICA8L2lwdGNFeHQ6UmVnaXN0cnlJZD4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ODkxNWE4NTItNzk0MC00ZWQ1LWI3ODktNGM1OTk0OTg3Y2ZjIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKExpbnV4KSIKICAgICAgc3RFdnQ6d2hlbj0iLTA1OjAwIi8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICAgPHBsdXM6SW1hZ2VTdXBwbGllcj4KICAgIDxyZGY6U2VxLz4KICAgPC9wbHVzOkltYWdlU3VwcGxpZXI+CiAgIDxwbHVzOkltYWdlQ3JlYXRvcj4KICAgIDxyZGY6U2VxLz4KICAgPC9wbHVzOkltYWdlQ3JlYXRvcj4KICAgPHBsdXM6Q29weXJpZ2h0T3duZXI+CiAgICA8cmRmOlNlcS8+CiAgIDwvcGx1czpDb3B5cmlnaHRPd25lcj4KICAgPHBsdXM6TGljZW5zb3I+CiAgICA8cmRmOlNlcS8+CiAgIDwvcGx1czpMaWNlbnNvcj4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/PhHwJ9kAAAAGYktHRAD/AP8A/6C9p5MAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAHdElNRQflBxkVLxl59hWiAAACXUlEQVRYw9WZz0sbQRTHPxlQpLeKYsDEQ5verZ66RaESb/4D8W/ooX9Hzu0hEsyt/4SgByG3Gmmv1qsbD3prhAh6eQvPYbLJrNnd6RcGlpmdt9+ZN/N+bYVsqACfgD1gC/gAvAOWZPwBuAaugAvgFOgDT+SMDaANxPIxnxbL3I08iK0CHWCcgZjdxiJrdVZVTcMh8B146xiLgXNgAAylAaxJ2wR2gapj7j3wFfiZddcWgCPHDjwAXSDykBXJnJFD3hGw6EvuDXDiEHYMrL/iqKyLDFvuiXxzJiw6yMVAc45nugncOEguzDLZVutvoJ7DxauJbFvdUy+ETW45R7O17CB5mGZK7iy11sgfNcuu3k0yQR1rJU2KQ9P6dsflIcbWbS0ax5Yxf+Fx2mpw5GFKqsC3CTYxkrGqhwnSdrKtvYk+A12PVQ/Uihuqv6E0MvCQ17XuQCVZqda/j4d4VPMOVP+B6n/09DgvuBgJmbRv7VMe+sIhwZ4BtlXHOeVDc9gy1tkZBEDwUp9lI5GwVnHZ0BzeGxWmA9wGQHConpcMgcNIAIqKhMuG5jAykn2FRFB7nmsjqWGCjwEQ3FTPVwb4pTp2AiCoOVwY4Mza3qhEcpGl4tP/IlgIPtwKJWDtpQWsrpB/P6SQf1LSVC+AXN2RNK1MerkVQNrZmjbJVvWfkBL3pGjkKn3sz/nMxVlLH2nFo94cike91xaP9E52Uspvn4sov81SwGwBP0gvYF7Ksy5gVsXx75BTAVNjhZJKwL4ovIheyUg0+Q3xRdLWhiRfyUH/J4HwXwnnzsj4G+IZ6kZF+lDUE2YAAAAASUVORK5CYII='
play64 = b'iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAXxHpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjarZtpdhs5kIT/4xRzhMIOHAfre3ODOf58mShSpCxZdndbz6TMpQrIJTIiEzbr//53m//hT/ahmBBzSTWliz+hhuoav5Tr/Gn6aK+gj/rHPd6z76+b5xuOlzzP/vyzpPvzj9ft8wLnqfFbfLlQGfcb/f2NGp4reL/QfSMvK3L8Mu8L1ftC3p037H2BdrZ1pVry6xb6Os/3948Z+GvkoUabX2zyy79Dxnozch/v3PLWXzw6784CvPy1xjd+yTw6H/mg9YnfI/+Sx3qvBIN8ZafrZVXms1eev9lvXv/kFJ/O64YX3o2Zns9fvm7j18Y3auKXO/vxvPPb69nh10/befzdexaz9zq7ayFh0nRv6rEV/Y0PcpHg9WuJn8zfyO9Zfyo/xeCZgcvnNa7Oz7DVOtyybbDTNrvt0udhB0sMbrnMs3MDR8lrxWdX3fCXwU9Bfux22Vc/fcFjA/d6XnXPtVi9b9XbDVu48bR80lkuZiUUjDz8Fz/fXmhvCXlrr/K0FetyEoQsQzwnj3wKh9j9iKOoBn78fP4jfvV4MKqZCxtsVz+X6NHesSVx5NXRng9Gnk+u2TzvC2Ai7h1ZjPV44ErWR5ss8eCytdix4J/GhYrzwXVcYGN0k1W64H3COcXJvflOtvpZF915GczCEZFkyrim+oavAsBG/ORQiKEWfQwxxhRzLLHGlnwKKaaUchLwa9nnkGNOOeeSa27Fl1BiSSWXYkotrbrqAcdYU8211Fpb46aNKze+3fhAa91130OPPfXcS6+9DcJnhBFHGnkUM+po000/wYmZZp5l1tmWXYTSCiuutPIqq662CbXtd9hxp5132XW3p9esOW795efPvWYfXnPqKflgfnqNr+b8uIQVOIniMzzmgsXjWTxAQDvx2VVsCM6I68RnV3VkRXSsMopzphWP4cGwrIvbPn334bk3v5kQ/pXf3MNzRlz3X3jOiOu+8dyvfvvCa1MKxLi8UQ9JGopRL0/68aHmSpPK+dXz9hmw2iP1fc1dQh6BjTZj555svrs4Y1tjrn2FaGvwvVpWfNV62VWG7xTPnG2bq+cmFvIh1x2TfMuvsU3yV5rbc50yds+Z3BXgc2G7cK0rZqCCVV69Z6I0b6DUyyvV6VsjrT64kjMuPxbZ+7hqq2ROsim2NjL+iSuSAXW5AtTOjv3rUDCebC+1fWVstEPZpsy8XJ22jzgpn7iFm67t18ypW0xcr+53DQLeA7Jiqazr7HZ7MZjYDSubcv/y3XOfzq+r5dJySPsquwzxHpuLo2MMF9uoLXczXNsr+lFr9o7IvKRacJu6R+vYXq4mbuZx2Zw2cbN3syVvjIid5Z0yZzZJov44ouyQi8cRLmG+aZP3a223xA+1E4WWG3rhFO4qC4ZGAYkLUMAUy/i4C/eR9YdJAmCj7mZMobceMUHuYCdpcq1V4/wcDxNDx1z7Lib2dV8LYzsyAFMT+D3GslYjaNaH01oZK7tAWvJ1Pxv2e4ar+SZ+354X9nFj42BFh13Yfo5hunX1gKVr2tG4SWCvamsNroacRpltkOU1SMyntvKgJvBJMUUevszYH2Ycm73l6hcONFhwJ/ZfCTCSr/hBpJAd241c+AxFpzQJMtxPpLZFOu3UOzuPQFvLUza+L7Mka3ktiAUzMca/cOqyzfeRSAIIBibFyQtwnSQFgTomJuUmgUiy4u+1zGZZu6zrmDYlwt1iTQsaC0aDrRjWkqp2fRO4a/hlk1mlnhjCZUtAczUsslPplpgkV5ybS8MIijJ8jRpD8DHbdtNwXDbUPIwEKo6xucuzy0mClf0TJIO1xTyJ4S0MN/Q7/TsbrL4fXBgguDybEoH2C+RbhSjdo86ubyz8hqcdqBLBREmRAeRvoBq7OdAP9JxYlXfsaN7ss7KTQbKse1Fk0KdlCSq9LwtUOgtjWaavfO0CxLtUJ0ixMVfrSaw1QZS6yAouPgD73MlAXNi8XbFUl6vAXyqX5yvmPYqpVAPjql8FMsqaHreyOiARN2QyJtQZDhTXC7M70i35aZYAzkvYkNwncO6wEXMSOPngSRcw8fkkC3skWVYnWaIzZEtJBO+OLFuw3NYYWgkhYfcxBsmSPcniQOKGDQASqoj1I8Zl7cQCHWZKrsUb5Bw1sUr6YPsK4BAJ7EWjcVesHVhcz7FPrT/knWeLknY4uYe4Tdgr54oBBiuchHbWKoK/iJ0lCo4M42ohigT79BzZcpcy14ex+HNMmMF0mZ2lfHJaS5RjtUOLlCuJYGnwEAjhvlKrW6vGWAVE9DMlCqTbMYBnoaW6oqweC5Lc0wqwpBSHnWMpsPiJZ/pKAXdWca3XlF0boDFZ1EBdIGenOnSIzGoExuxCY0e5QlmNIjFF1uxftkYqW6oieG4AgzWpHmJ7dkU5EyMFmEzY0CUvReWyXuzP1jH8zA1jD++lMklm4SvCBuonKUhqAH2QgX1VjOZTn2x9w5gBSQgNeF47gsVN5EpvDRQtayBKeoNBLUqKscC6pZxIiva6ryih3YbSDNuBY0AxVnJFgmECfynqUsOguC0voHhVO6O4n9Cqum2q50/PUnqULGAWsQoehEtBtQ00TiC4lQ0TlZgcE0ogeqD+Yhq5FjVAwfy57sjCho9m4EMhR6HCR2uU61S4aqjPReuauc8OgtQEUJht57IlSxL2gisK0UoU4UBhpSYNggiZ3m0C/2cV2C7QJ0Jjk/cXgHYJFfJaCtolBEh+A+KSeo1Ky4oBs09RQqGBA0pZwxACU7EUSTAyoGp6hU0ig1OsAOGX1sS7hTJWJLdI60pdIH6B4gL8aPwKNC22NglKMHgJs1Vi0IKogDqndCIoi8LyGrwAQuszbAj6xusQVx9rhRBTnAE4p3gzRalwM6QWuqyBOhk8lEo7qLgQnyilcb/WLamDyjCabEZW5RMFaoOO43YQjD3AChbAhssDyhv6Tl3H1MTBaGAuhYHixteqK7An6RG4U8egiW7itZlOHEQvcWC6+GZ9ULk4gS6ESoxcUCMKtEbN4ISJKRfaYr9FKDCMUSCjrkoCCxxYf5tz5wc7GpMku0K3UsRRKAHJn7xQQzE+SRTUI5Q+I1fw6UEvBW40/8ESqhj1CCl7Ar1Q4UpIlwQatbzPuUOY3Jw0WaQIMfJWw1hCHEBzFbKT4DYViMLhVeJCGlnf0DHzM1+7Kx61R4BR8YEYsaLHE4WVWhkxgzkihEIBJHJ30ixnylEhW9mH1j5MZVeH4EJT2A3OD5mytN+Yi0EywdbSTlJDYiG1YtDUF4zvwnaJJHGLhKliFKoPmgDH3UJ9qwc1EImQiGndeAmmbiXj89IEvJ4JGNewu3tlKkPqQABmh42OnC2zsDUpTUm3jSRJkHAPC65y07nyAcYCimr4SvQij1WOSFHw22khr6sYFXISTOcygDMiCDYoAeXfQwGlStGA+MMevLTEyE9hnbDFhteG2BB/Y0Nf1YY9AT92p0wcejEhZTjl2XtFC0OnxCsAJ4LnYcIQwKOmSk1sCM5z9/6OvJQoIcrBSpGrg3ckVTKpstReFAi4W4Ued0pRWsoTW8TQytHekumijAuJcxHWATz2K4aqn/fJqWmgF6ZwEf+mQ8T7KJo2N3U0J2cpFCFRsqVQ3sKxHZ40HFoC4YmjjHxD2gYdK6VE2ewug90gIMBfi7f5MCWYEammTIkwx5ufCLd5QzKKFvQZnkHBEDHFCqXOBjJbyyw1SMssH0VTuzYovJ2QoESYApNtAvXwwpgP0FJcKdxUJtugcD704tayxble0IgJugHKktBU9O6AWX8NaA1iGphd1f2J4HokMFk4YZ34S5JFCftOF75WEpqQe3jnh0r4TSE0v1bCsSXMtyBTfnYsEG8DqKzU7969eGqwGPEBBTOUK5vGBSb5WR7pqSBsDykDQk/xICjh2xAf9A2rSLj/1mpRCnzyxYwLTicLbCrQD4CCO6hn3CZ0cYKfI4O5kieCnx348Rm+yaVkWIFastawOIwBVKs6Io5Ez5eMbIGEahIQOOIJ+IeUHokPyL8yGoT8Agd3ig1+BK+HgPojy4sdonszvk5Bq9yaEY7wxpIsOY5A7tqgOFLfeUNeCB+VCvSiNgDiobYc75gr+vzrwLhFDYzqQXmPmrGUer0D5ff0Em7GK76arh3GqzoYxjBGNVrcoQwaMAHKA2XgGtRK7IhzbcJ3YLzPJ5ZrvsiXTiwjydjzSWCfzMFgB3yAK/hMQ7Nhnl1l3CN8ASghPk+aw0Fmg3PmVAnNSRHOFyRsQNij7ScDWy+E5pQMLAhDzHVQB9Ywlaa1Ky0haYAGRUg4vrIzoWTK2KTtsqyAEwGdy5CyRRDtQ85UnmjnBkKKeqAIUREljEqceALmoqrbHNm9/iRjH/0+6VmcVppmz4p7rgWw4QX4/XihHXfvgKqEbhQe92TGLwiMkCh3q0fIMlrEjmevJ7TqpKN593qq0MOx7l6PEG7p9dxtro/mGTLGeoN/97FLk+6C6mv/lllg9DHKya380dEixKUlMKxTYyO6PZJ/UxezaJIgsmSVb2XjAyWqdCGP+ucKpintm1KU5CI5SvPhbhg8ataPJcuKOpLbS8Mtnl6RtOD8KdtEmo/xyV/9GEBNgvu8KCN7hOGmHO2csdWp2S+GkpqtHRukc5aafWhPA+3KJbQHSwE+9tLkKtlkBZgnBau9vbWB0YSiAYmCw8CWICv5ChrYKTSaWP+pWSfyBax8uPWFYYhbD+EUpXzcapRzUsUxzmvH+G71qFvUrUsmZIqiHz55daV5ELL7ixISv8bDiytDP44s+vmEm6iv1kXiKLefFKh0jPZbLHAJDZv9jAZzYvMjsL6Mq9+EJaQHXwW8dsS77SLeyel6qomQvqPdnbB8iMDR7jU3mUtUGSAClx5e0WMbiewfcOLmFuoTysZV65pCfb2T1rr2cP1DBVcVGi8qy1qIsYif6gF/iBVBMV5Y8c4QKqlCgo/xIaSUIGbhuyvCdwmp5qURYCOBXY02LYj3dykljYCvbf5dBprb6H8dN5/DxvzTuPkcNuafxs3nsDF/GTevLaO3jpH5o5aRlcw9zEtrB9XRTml7BB3CkLaUIzjDRzv/TDJgIDugN6mDN/27CCe+Af1rVemf1Fjum1AKCULavaHGQoOF5VqtsTfJTUtp29mBQFWiEMBpqzR3bpmWX5oyySB6hbM5rAOLqvHUsJ/B/rNtzT8F+1Mlz/ckRswzSDRE9Isuqn+lT1W1WZmi9CrRk5CBUE+vUsZpMsbRXiUPBrIDQxjd2Ze2Mh/8ibMP4SPpgxSZL1jRg5jOfohpnEJM801MC4Jbmj2f5ghGJ18Lz8xXmnFBo1Yn03N/TuzYCUAR74ldl3aRhycjvAgIaj/U9KHGX4AiiRq/lWSWjouK8aMkdXbmP5BiYYdkzjRDRpOn74WDX00515lMqh2t1pm6gjRcr1OoTo/mKuajHd/nYxom2vHZlnBeGCxYyCbKzqqpvxgOmo8Xtv/ZxNJx7DJrAAmPxtCpjDZ97xKvnQ0KaLIfvY14qbaWMSBi5C3YlbC1rORfCJsQLUTK3X56EDadILl4EzZ4iECnIoE0XOZ6LesaxK4Pg9fdfBAJJ5potk+jWkEJmQWkD73twgMmHuhuvi+tP+SehIf2IA5Omdd5sSNKhOJm6SY9JH8F9BZU9DF3lE69bOAh+eXoBzhlXoAqgz5PoPpQ4284hRJhzbKhRxQRW9KnM9k9o8g17fw/ogiGgxTvJ4pOG1kG15RFuYZatkoon8GceWdOm3KMasWIV9eBE0lCKR3Sqru8GCZAFL/CPfNVuZBqLUJbRh8a/xL+a78Pg2d94YTOmV6GpV5L/Ock8V3dW5djSlWZ2ut7Ktkm2G0BhngL2Z2cCdKAViWbAlxVzh4huLk9MbD+oExmGfpI9ldp+ACjZ+TD13qIehZhDBnNOel3Dyt6KjzzRcoKESAY9uTl5pwUEEn51liWu5cHNQ/Ce2Z5ac9d+fNkz/z1aA8YKF4K57Ypy5SesG5tmf4uhpFob2J42l/EcK24gGslGWNqtxt9Ok1h83e726o8/WWI8DJNmxIRSO2W9qsmz70X86rJ0Qyx9CueUVgbHiOfURhyX2sQubxslS6Mek+6XBkuSw0G2CjE7Q6XJYpbbSaZg3kuHaI+ReUslm3WWTWNH5IyOW1oup/OaTyQmBgvMppTE8vxgSaK/kwowjRVRi4Uy3tEATpeI86pIwq4jpwzkwnFrtLYep/Mvw3mze8m8zLB/WES8fSFuYmpqpmv9C2U+sjLO4xfusJeolinFsC6HkDZEsQvfBuN+GgMq7w8bXUVbLYFwEfJw2kKi8CUvro5XeH+ecwdPuY00iTdZ1gBTxRf+udCXAC+VqI2mY++cJVJxaWTCnf8VJJih03Phnl+mySWQi7qdWo1JCQpLYrkqGW21PbnfqVsRNuVEoR3u/K15sDRzL+V6Q+Vbv6tTH+odPNvZfpfna35RB+9jAi05ylDI/gIZagb4RkvGl6JyUPAX0KqAHS2IYk8z4kBGSt+zGeRpltEoFEV6ESGdOFkOq5w59TAU4nI918OF11hhi7QoLVJ2/qbcvTCNO4yXy/pZOUeicH5B8JIdZH5SRiBOD/NIQiumM2hk3fsPuNIJjxvDWcIi0vxGtm+h++TUT6HB+s6w+7agxw4lkb+ugf0sBBR/dCLe0APpMXg/RnQJy/ptcw+Ij/flKnq7Aum82BMbIcv75sxXXGsVap9g1osBLD5Z095Ck3t9oRFKlMifB2W6vBwOzEenNKTi6AQeiJdAls+i2O7TnX4TVN1ziMsH23iIyzjaqZq9/YMFna+KI3d9jNYKL1IydC5QoYpRGk33zFgw1JpqTEgpwMNEa7uCYRSkt6EHlJwV7Vyvh9ZKQdZpHCO++ibSJ9zmRPfC52C/DH1Xbvc0+LHWPYY9D5/8BsRr+3DF5omlLh99Geek8vnEFHS6WXhN1GRBo15dGiwKZ+4u0XnpEdbFcNM6Radkx4uDu+l431OevS2Lhk1yEGPyyzqVxzutKXeulJyokT7UtKVknOB9aMB9Osg3fzNJP0OEjk5JFJRwxfCL0R9GQFL4dyzTbmv7ItiC6csVQ8tHs9J/LIo6f7D+K8sjH+M+RhMVWo/IARNvCdTcig5utHOYCos0lMHUzAjqzSdgiiFcoSPhjXEtbE4c3esqwJjPB1rOWIUtGOdftdUpBbLyUQ5076tsfscTXzoWbgepE2PJoLM2hBHEcopDvkq0Fn982Si0IEmw9qWMfZTUwdKs4v2Pi7gqncLpysVUMQU9KE0dqGiXU62ArjS0Qdg4nRmB8BkOgur77xTErQoJz3IYZUltbdzHHBHOX+c9DRLET4qEYi2gtUCocrq/RF77TG2OBNcHVXhTDmpGu450pEhycmJ1KCjr3CZpwgZ+XP9glEUwcX1cXYvKFg9S9gtpuTcrHlqqZdZ95lScxWk+zmYeM7cwRDlaOLypxN3Rm1KMYYjRc7JRP3PHFsETBza82v+5WivnJg8Z3vu471yuFcPJgrCyIlJOZ7/fmL6Pi8tCv2s7NPC7mXJKaHXhZn7yORjYeGcLnosTJQ2yD+weH0eLBbtqbj+wl0GwPZxuHhg5Y85p85gvztxOouMv15G8+YvZvPgw34NHY2cS/4TAvFi4ElSHiVT5Eyh9BulrsvxxIeOA9tGdlVa12SQDUhr+V9klIShfEmQeJpzPBECLCBT7+OJDzHpJ7pFTyeS+VEIcJMTD1BBzWtp30XVbusymjGXHNhhX3J+UBJGjw9CHvT4IKoiaidDlJtrCBp4hCg3Ofb0N2drfjvoe875zJ8M+tBpQg2ebbCXMe5zUGwyeCiw3vU/CcAyjmiX5gn8OUJSPiT57xS5+U6Sn3D8ONxLCr0e78Xg0myQkJKwKKxIWJY9Z1LklP/N5QaBLDavHspT4YjIU5JDyWXQrW89MvJVs+6r5+cpf7A4qbKRU/5yiOAoGxEcuYs0MEtO35YMpZIqJMdLMQ7KRqTwXH/eNDXfd013wBafDksLJs2DSfW0lx9nls2zu3wiuUAc+seJ5TH0GKAe9ZICIpXE/3JoQM4MmP/i0MCtRUhh1Iz5f9ksdaUPf0yKAAABhWlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TpSIVByuoOGSoThb8Qhy1CkWoEGqFVh1MLm0tNGlIUlwcBdeCgx+LVQcXZ10dXAVB8APEzc1J0UVK/F9SaBHjwXE/3t173L0DhFqJaVbbKKDptplKxMVMdkUMvSKEfvQihjGZWcasJCXhO77uEeDrXYxn+Z/7c3SpOYsBAZF4hhmmTbxOPLVpG5z3iSNsQ1aJz4lHTLog8SPXFY/fOBdcFnhmxEyn5ogjxGKhhZUWZhumRjxJHFU1nfKFjMcq5y3OWqnCGvfkLwzn9OUlrtMcRAILWIQEEQoqKKIEm/oqQifFQor24z7+AdcvkUshVxGMHPMoQ4Ps+sH/4He3Vn5i3EsKx4H2F8f5GAJCu0C96jjfx45TPwGCz8CV3vSXa8D0J+nVphY9Arq3gYvrpqbsAZc7QN+TIZuyKwVpCvk88H5G35QFem6BzlWvt8Y+Th+ANHWVvAEODoHhAmWv+by7o7W3f880+vsB2+ly0aMbXlUAAA+LaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA0LjQuMC1FeGl2MiI+CiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICB4bWxuczppcHRjRXh0PSJodHRwOi8vaXB0Yy5vcmcvc3RkL0lwdGM0eG1wRXh0LzIwMDgtMDItMjkvIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6cGx1cz0iaHR0cDovL25zLnVzZXBsdXMub3JnL2xkZi94bXAvMS4wLyIKICAgIHhtbG5zOkdJTVA9Imh0dHA6Ly93d3cuZ2ltcC5vcmcveG1wLyIKICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIgogICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICB4bXBNTTpEb2N1bWVudElEPSJnaW1wOmRvY2lkOmdpbXA6ZjJiZWE2YjQtYzMzZC00YTczLTgyMWEtMGRkNjQ0MjAyYWNiIgogICB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjcxMjA1OWYxLWMwYmEtNDg0Ny1iNTU1LTRkODkxYTFhNTdhZCIKICAgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjhlYWExZjU4LTlmOGEtNDg2OS1hNGQyLWUwYzg3Y2E5YmYwYSIKICAgR0lNUDpBUEk9IjIuMCIKICAgR0lNUDpQbGF0Zm9ybT0iTGludXgiCiAgIEdJTVA6VGltZVN0YW1wPSIxNjI3MjQ5OTgwNTI5MTc4IgogICBHSU1QOlZlcnNpb249IjIuMTAuMjIiCiAgIGRjOkZvcm1hdD0iaW1hZ2UvcG5nIgogICB0aWZmOk9yaWVudGF0aW9uPSIxIgogICB4bXA6Q3JlYXRvclRvb2w9IkdJTVAgMi4xMCI+CiAgIDxpcHRjRXh0OkxvY2F0aW9uQ3JlYXRlZD4KICAgIDxyZGY6QmFnLz4KICAgPC9pcHRjRXh0OkxvY2F0aW9uQ3JlYXRlZD4KICAgPGlwdGNFeHQ6TG9jYXRpb25TaG93bj4KICAgIDxyZGY6QmFnLz4KICAgPC9pcHRjRXh0OkxvY2F0aW9uU2hvd24+CiAgIDxpcHRjRXh0OkFydHdvcmtPck9iamVjdD4KICAgIDxyZGY6QmFnLz4KICAgPC9pcHRjRXh0OkFydHdvcmtPck9iamVjdD4KICAgPGlwdGNFeHQ6UmVnaXN0cnlJZD4KICAgIDxyZGY6QmFnLz4KICAgPC9pcHRjRXh0OlJlZ2lzdHJ5SWQ+CiAgIDx4bXBNTTpIaXN0b3J5PgogICAgPHJkZjpTZXE+CiAgICAgPHJkZjpsaQogICAgICBzdEV2dDphY3Rpb249InNhdmVkIgogICAgICBzdEV2dDpjaGFuZ2VkPSIvIgogICAgICBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmQwOGE5M2FmLWM0MTItNGE3OC05MTRiLTVlNWZhNzNkZjRjYSIKICAgICAgc3RFdnQ6c29mdHdhcmVBZ2VudD0iR2ltcCAyLjEwIChMaW51eCkiCiAgICAgIHN0RXZ0OndoZW49Ii0wNTowMCIvPgogICAgPC9yZGY6U2VxPgogICA8L3htcE1NOkhpc3Rvcnk+CiAgIDxwbHVzOkltYWdlU3VwcGxpZXI+CiAgICA8cmRmOlNlcS8+CiAgIDwvcGx1czpJbWFnZVN1cHBsaWVyPgogICA8cGx1czpJbWFnZUNyZWF0b3I+CiAgICA8cmRmOlNlcS8+CiAgIDwvcGx1czpJbWFnZUNyZWF0b3I+CiAgIDxwbHVzOkNvcHlyaWdodE93bmVyPgogICAgPHJkZjpTZXEvPgogICA8L3BsdXM6Q29weXJpZ2h0T3duZXI+CiAgIDxwbHVzOkxpY2Vuc29yPgogICAgPHJkZjpTZXEvPgogICA8L3BsdXM6TGljZW5zb3I+CiAgPC9yZGY6RGVzY3JpcHRpb24+CiA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz5JThhfhAAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAAAJcEhZcwAA69IAAOvSAaKNwbEAAAAHdElNRQflBxkVNQCtsEe5AAAAiklEQVQ4y62VSxLAIAhDzf0v3U0/FhP6OiNLeYwaMI5RQmeMLlQCYgl9JTNp1i3qy0NxPA/gaqrTbc71+j7Zrz7ceQp+NvYiVqkyWJcN6UE5UA50tQGUA5txm/bOoLaD69b4MkweK7hgZ2IL8VCwMds/4fxx8efKDQBbCjcpbnvcSH9YMzf7/vs4APdEAdxmVssAAAAAAElFTkSuQmCC'

def conversation_loop():
    global voice, brain, attention, PAUSED

    client_sound = get_client_sound()
    
    print("You: " + client_sound)
    response = attention.say(client_sound)
    print("Martha: " + response)
    voice.say(response)
    voice.runAndWait()
    voice.stop()

def generate_gui():
    global PAUSED, face
    first = True


    ####################### GUI STRUCTURE ##############################
    sg.theme(random.choice(sg.theme_list()))    
    menu_items = ['File', ['Save log', 'New Conversation', "Pause Conversation", 'Save and Exit', 'Exit without Saving']], ['View', ['Unblur', 'New Theme']]

    layout = [
            [sg.Menu(menu_items, key='-MENU-')],
            [sg.Column([[sg.Image(data=face['pixel'], key="-FACE-", size=(300,300))]], justification='center')],
            [sg.HorizontalSeparator()],
            [
                sg.Column([[sg.Button(image_data=play64, image_size=(40,40), key="-PAUSE-PLAY-")]]),
                sg.Column([[sg.Input(key='-INPUT-')]])
                ],
            [sg.Output(size=(400, 50), background_color="Black", text_color="LimeGreen", font="Consolas",  key='-OUTPUT-')]
            
    ]

    window = sg.Window("Martha AI", size=(800, 600)).Layout(layout)
    #window['-INPUT-'].bind("<Return>", "_Enter")

    #conversation_start = threading.Thread(target=conversation_loop)
    #conversation_start.start



    ###################### EVENT LOOP ##########################
    while True:
        event, values = window.read()

        # Exit Event 
        if event == "Exit" or event == sg.WIN_CLOSED:
            sys.exit()

        if event == "Save log":
            name = sg.filedialog.asksaveasfilename()
            info = window['-DEBUG-'].Get()
            if name and len(info) != 0:
                save_file(name, info)

        if event == "Blur":
            window["-FACE-"].update(data=face["pixel"])
            window['-MENU-'].update(menu_items)
        
        elif event == "Unblur":
            window["-FACE-"].update(data=face["original"])
            new_menu = ['File', ['Save log', 'New Conversation', "Pause Conversation", 'Exit']], ['View', ['Blur', 'New Theme']]
            window['-MENU-'].update(new_menu)
        
        if event == "New Theme":
            window.close()
            sg.theme(random.choice(sg.theme_list()))
            window = sg.Window("Martha AI", size=(800, 600)).Layout(layout)
        
        if event.endswith("_Enter"):
            pass

        # Main event
        if event == "New Conversation":
            new_conversation()

        if event == "-PAUSE-PLAY-":
            if not PAUSED:
                print("pausing!")
                PAUSED = True
                window.Element('-PAUSE-PLAY-').Update(image_data=play64)
            else:
                PAUSED = False
                window.Element('-PAUSE-PLAY-').Update(image_data=pause64)
                if first:
                    query_greeting()
                    while not PAUSED:
                        conversation_loop()
                    first = False

def get_client_sound():
    global recording, PAUSED
    print("Recording...")
    with sr.Microphone() as source:
        audio = recording.listen(source)
        while not PAUSED:
            try:
                return recording.recognize_sphinx(audio)
            except sr.UnknownValueError:
                print("Error: I could not understand you")
            except sr.RequestError as e:        
                print("Sphinx error; {0}".format(e))

def get_face():
    global AI_PHOTOS_API_KEY
    
    # url generation with get request customizations with auth header
    gender = "female"
    age = "adult"
    api_url = f"https://api.generated.photos/api/v1/faces?gender={gender}&age={age}&per_page=1&order_by=random"
    auth = {"Authorization" : f"API KEY {AI_PHOTOS_API_KEY}"}
    
    # retrieve jpeg url using api call
    response_json = json.loads(requests.get(api_url, headers=auth).content)
    image_url = response_json["faces"][0]["urls"][-1]['512']

    # Retrieve jpeg data in bytes
    res = requests.get(image_url).content
    #res = requests.get("https://thispersondoesnotexist.com/image").content
    img = Image.open(BytesIO(res))
  
    # Image Processing
    img = img.resize((300,300), resample=0)
    img_w_blur = img.filter(ImageFilter.BLUR).filter(ImageFilter.BLUR)
    img_pixel = img.resize((int(img.size[0] * .2),int(img.size[1] * .2))).resize(img.size, Image.NEAREST)

    # Convert to PNG and return bytes object
    bio = BytesIO() 
    img.save(bio, format="PNG")
    blurbio = BytesIO()
    img_w_blur.save(blurbio, format="PNG")
    pxlbio = BytesIO()
    img_pixel.save(pxlbio, format = "PNG")

    return { "original" : bio.getvalue(), "blur" : blurbio.getvalue(), "pixel" : pxlbio.getvalue() }

def initialize():
    global voice, brain, face, CLEVERBOT_API_KEY, attention
    
    voice = pyttsx3.init()

    if platform == 'linux' or platform == 'linux2':
        voice.setProperty('voice', 'english_rp+f3')
    elif platform == 'win32':
        voice.setProperty('voice', 'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_EN-US_ZIRA_11.0')
    
    voice.setProperty('rate', 120)
    brain = CleverWrap(CLEVERBOT_API_KEY)
    attention = brain.new_conversation()
    face = get_face()

def new_conversation():
    global attention
    global voice
    attention.reset()
    print("Martha: Memory wiped.")
    voice.say("Memory wiped.")
    voice.runAndWait()
    voice.stop()

def query_greeting():
    global voice
    greetings = ["Where have you been?", "What's up?", "Welcome back.", "You're back!", "How's it?", "Hey, you!"]
    greeting = random.choice(greetings)
    print(f"Martha: {greeting}")
    voice.say(greeting)
    voice.runAndWait()
    voice.stop()

def save_file(filename, info):
    """ adds some structure and saves debug info to a file """
    with open(filename, 'w') as save_file:
        now = datetime.now().strftime(("%m/%d/%Y, AT %H:%M:%S"))
        save_file.write(f'\tLOG FOR {now}\n')
        save_file.write(info)
        save_file.write('\n--')

def main():
    initialize()
    generate_gui()
    
try:
    main()
except Exception as err_msg:
    with open("error.log", "a") as err_log:
        err_log.write(f"\n{str(err_msg)}")
